// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model Store {
  id String @id @default(uuid())
  name String
  userId String
  Billboards Billboard[] @relation("BillboardToStore")
  Categories Category[] @relation("CategoryToStore")
  Sizes Size[] @relation("SizeToStore")
  Colors Color[] @relation("ColorToStore")
  Products Product[] @relation("ProductToStore")
  Orders Order[] @relation("StoreToOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Billboard{
  id String @id @default(uuid())
  storeId String
  store Store @relation("BillboardToStore" ,fields: [storeId], references: [id])
  categories Category[] @relation("CategoryToBillboard")
  label String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId], name: "storeId")

}


model Category {
  id String @id @default(uuid())
  storeId String
  store  Store @relation("CategoryToStore", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation("CategoryToBillboard", fields: [billboardId], references: [id])
  products Product[] @relation("ProductToCategory")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId], name: "storeId")
  @@index([billboardId], name: "billboardId")
}


model Size{
  id String @id @default(uuid())
  storeId String
  store Store @relation("SizeToStore", fields: [storeId], references: [id])
  products Product[] @relation("ProductToSize")
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId], name: "storeId")
}


model Color {
  id String @id @default(uuid())
  storeId String
  store Store  @relation("ColorToStore", fields: [storeId], references: [id])
  products Product[] @relation("ProductToColor")
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId], name: "storeId")
}


model Product{
  id String @id @default(uuid())
  storeId String
  store Store @relation("ProductToStore", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("ProductToCategory", fields: [categoryId], references: [id])
  sizeId String
  size Size @relation("ProductToSize", fields: [sizeId], references: [id])
  colorId String
  color Color @relation("ProductToColor", fields: [colorId], references: [id])
  orderItems OrderItem[] @relation("ProductToOrderItem")
  images Image[]
  name String
  price Decimal
  isArchived Boolean @default(false)
  isFeatured Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId], name: "storeId")
  @@index([categoryId], name: "categoryId")
  @@index([sizeId], name: "sizeId")
  @@index([colorId], name: "colorId")

}


model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder",fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId], name: "storeId")
}




model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation("ProductToOrderItem", fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId], name: "orderId")
  @@index([productId], name: "productId")
}


model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id])
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId], name: "productId")
}
